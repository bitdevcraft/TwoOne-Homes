// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TwoOneHomes.Persistence;

#nullable disable

namespace TwoOneHomes.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("management")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Ulid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "core");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Ulid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "core");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Ulid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "core");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Ulid>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserTokens", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Auditable.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audits", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Auditable.AuditEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AuditId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.ToTable("AuditEntries", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.ClientAppLayout.NgFormLayout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ObjectType")
                        .HasColumnType("text");

                    b.Property<string>("Placeholder")
                        .HasColumnType("text");

                    b.Property<bool>("ReadOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean");

                    b.Property<string>("SmallText")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormLayouts", "web");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.ClientAppLayout.NgMenu", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("Hierarchy")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("ParentId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("RouterLinkArray")
                        .HasColumnType("text");

                    b.Property<string>("UrlArray")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus", "web");

                    b.HasData(
                        new
                        {
                            Id = "0000000000FPSYZH3GPW5MSXK9",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-wallet",
                            Label = "Sales"
                        },
                        new
                        {
                            Id = "0000000000HEJQ7G0X4875BX5W",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-wallet",
                            Label = "Inventory"
                        },
                        new
                        {
                            Id = "0000000000775C83ZMHS46KZB9",
                            CanDelete = false,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-cog",
                            Label = "Setup"
                        },
                        new
                        {
                            Id = "0000000000QYCVEFG11KHT3GZE",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-id-card",
                            Label = "Projects",
                            ParentId = "0000000000HEJQ7G0X4875BX5W",
                            RouterLinkArray = "/r/Projects/list-view"
                        },
                        new
                        {
                            Id = "0000000000NJ1W4RE1R0D30K5Y",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-id-card",
                            Label = "Properties",
                            ParentId = "0000000000HEJQ7G0X4875BX5W",
                            RouterLinkArray = "/r/Properties/list-view"
                        },
                        new
                        {
                            Id = "00000000005WS823HSNADT1DRY",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-id-card",
                            Label = "PaymentPlans",
                            ParentId = "0000000000HEJQ7G0X4875BX5W",
                            RouterLinkArray = "/r/PaymentPlans/list-view"
                        },
                        new
                        {
                            Id = "000000000065ET5P858WE44ESH",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-id-card",
                            Label = "Leads",
                            ParentId = "0000000000FPSYZH3GPW5MSXK9"
                        },
                        new
                        {
                            Id = "0000000000TMSKXZG0TQS8KH4E",
                            CanDelete = true,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-address-book",
                            Label = "Contacts",
                            ParentId = "0000000000FPSYZH3GPW5MSXK9"
                        },
                        new
                        {
                            Id = "00000000008CPGH1XH0C8H43XB",
                            CanDelete = true,
                            Hierarchy = 2,
                            Icon = "pi pi-fw pi-building",
                            Label = "Accounts",
                            ParentId = "0000000000FPSYZH3GPW5MSXK9"
                        },
                        new
                        {
                            Id = "00000000009XWDPJSQF96B4NP7",
                            CanDelete = true,
                            Hierarchy = 3,
                            Icon = "pi pi-fw pi-bookmark",
                            Label = "Opportunities",
                            ParentId = "0000000000FPSYZH3GPW5MSXK9"
                        },
                        new
                        {
                            Id = "000000000010A44W9QKCDF8R01",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-plus",
                            Label = "New Lead",
                            ParentId = "000000000065ET5P858WE44ESH",
                            RouterLinkArray = "/r/Leads/new"
                        },
                        new
                        {
                            Id = "000000000029GN3AW98KG9NSW0",
                            CanDelete = true,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-list",
                            Label = "List View",
                            ParentId = "000000000065ET5P858WE44ESH",
                            RouterLinkArray = "/r/Leads/list-view"
                        },
                        new
                        {
                            Id = "0000000000B9VEPEMT33QKH8GJ",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-plus",
                            Label = "New Contact",
                            ParentId = "0000000000TMSKXZG0TQS8KH4E",
                            RouterLinkArray = "/r/Contacts/new"
                        },
                        new
                        {
                            Id = "0000000000BY6K569JMAXKBFQ4",
                            CanDelete = true,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-list",
                            Label = "List View",
                            ParentId = "0000000000TMSKXZG0TQS8KH4E",
                            RouterLinkArray = "/r/Contacts/list-view"
                        },
                        new
                        {
                            Id = "0000000000AA85C44J7Z6EHSK9",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-plus",
                            Label = "New Account",
                            ParentId = "00000000008CPGH1XH0C8H43XB",
                            RouterLinkArray = "/r/Accounts/new"
                        },
                        new
                        {
                            Id = "0000000000ZZZNEZFA5KW8VQ49",
                            CanDelete = true,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-list",
                            Label = "List View",
                            ParentId = "00000000008CPGH1XH0C8H43XB",
                            RouterLinkArray = "/r/Accounts/list-view"
                        },
                        new
                        {
                            Id = "0000000000DB9RAE6NFQ7D947H",
                            CanDelete = true,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-plus",
                            Label = "New Opportunity",
                            ParentId = "00000000009XWDPJSQF96B4NP7",
                            RouterLinkArray = "/r/Opportunities/new"
                        },
                        new
                        {
                            Id = "00000000007TXYNB9SCDNX2PBW",
                            CanDelete = true,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-list",
                            Label = "List View",
                            ParentId = "00000000009XWDPJSQF96B4NP7",
                            RouterLinkArray = "/r/Opportunities/list-view"
                        },
                        new
                        {
                            Id = "00000000006D8TXH0VSKS8A16T",
                            CanDelete = false,
                            Hierarchy = 0,
                            Icon = "pi pi-fw pi-users",
                            Label = "Administrations",
                            ParentId = "0000000000775C83ZMHS46KZB9"
                        },
                        new
                        {
                            Id = "0000000000RS4BRNHEH542PJ7C",
                            CanDelete = false,
                            Hierarchy = 1,
                            Icon = "pi pi-fw pi-wrench",
                            Label = "Settings",
                            ParentId = "0000000000775C83ZMHS46KZB9"
                        },
                        new
                        {
                            Id = "0000000000E1X6ZFQH12PK4K79",
                            CanDelete = false,
                            Hierarchy = 0,
                            Icon = "pi pi-fw",
                            Label = "Permissions",
                            ParentId = "00000000006D8TXH0VSKS8A16T",
                            RouterLinkArray = "/setup/administrations/permission"
                        },
                        new
                        {
                            Id = "0000000000KZS5Z9FTHRW81DB8",
                            CanDelete = false,
                            Hierarchy = 1,
                            Icon = "pi pi-fw ",
                            Label = "Roles",
                            ParentId = "00000000006D8TXH0VSKS8A16T",
                            RouterLinkArray = "/setup/administrations/role"
                        },
                        new
                        {
                            Id = "000000000091AF12TDAYDRJWWX",
                            CanDelete = false,
                            Hierarchy = 2,
                            Icon = "pi pi-fw ",
                            Label = "Users",
                            ParentId = "00000000006D8TXH0VSKS8A16T",
                            RouterLinkArray = "/setup/administrations/user"
                        },
                        new
                        {
                            Id = "000000000091VTD5TYNF1KWWPW",
                            CanDelete = false,
                            Hierarchy = 0,
                            Icon = "pi pi-fw",
                            Label = "Menu Settings",
                            ParentId = "0000000000RS4BRNHEH542PJ7C",
                            RouterLinkArray = "/setup/settings/menu"
                        });
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Accounts.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BookingId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ParentAccountId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Accounts", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MainCustomerId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PropertyId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(65535)
                        .HasColumnType("character varying(65535)");

                    b.Property<decimal>("SalesPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Bookings", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingBroker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("AccountId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BookingId")
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("MainOwner")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingBrokers", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingBrokerAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BookingBrokerId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("BookingBrokerId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingBrokerAgents", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingCustomer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BookingId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("MainOwner")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingCustomers", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Contacts", "management");

                    b.HasData(
                        new
                        {
                            Id = "01JETM3W1PTN2C5Q2VEM0GGKHW",
                            CreatedOnUtc = new DateTime(2024, 12, 11, 10, 26, 57, 718, DateTimeKind.Utc).AddTicks(9577),
                            Email = "john.doe@example.com",
                            Mobile = "+123456789",
                            Name = "John Doe",
                            Phone = "+987654321"
                        },
                        new
                        {
                            Id = "01JETM3W1P3KKJHF1Y2Z23NKDR",
                            CreatedOnUtc = new DateTime(2024, 12, 11, 10, 26, 57, 718, DateTimeKind.Utc).AddTicks(9586),
                            Email = "jane.smith@example.com",
                            Mobile = "+987654321",
                            Name = "Jane Smith",
                            Phone = "+123456789"
                        },
                        new
                        {
                            Id = "01JETM3W1PFJC2YMQPPYAC5SY1",
                            CreatedOnUtc = new DateTime(2024, 12, 11, 10, 26, 57, 718, DateTimeKind.Utc).AddTicks(9589),
                            Email = "alice.brown@example.com",
                            Mobile = "+1029384756",
                            Name = "Alice Brown",
                            Phone = "+5647382910"
                        },
                        new
                        {
                            Id = "01JETM3W1P1MN9QPN7K0WT7H1X",
                            CreatedOnUtc = new DateTime(2024, 12, 11, 10, 26, 57, 718, DateTimeKind.Utc).AddTicks(9592),
                            Email = "bob.johnson@example.com",
                            Mobile = "+567890123",
                            Name = "Bob Johnson",
                            Phone = "+210987654"
                        },
                        new
                        {
                            Id = "01JETM3W1PA0S5T0A5VX901492",
                            CreatedOnUtc = new DateTime(2024, 12, 11, 10, 26, 57, 718, DateTimeKind.Utc).AddTicks(9595),
                            Email = "charlie.davis@example.com",
                            Mobile = "+789012345",
                            Name = "Charlie Davis",
                            Phone = "+321654987"
                        });
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Commissions.Commission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BookingId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BrokerId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BrokerId");

                    b.ToTable("Commissions", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.PaymentIntents.PaymentIntent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("BookingId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int>("IntentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("StripePaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentIntents", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Refunds.Refund", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StripeRefundId")
                        .HasColumnType("text");

                    b.Property<string>("TransactionId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("Refunds", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Transactions.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentIntentId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PaymentPlans", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IntervalCount")
                        .HasColumnType("integer");

                    b.Property<int>("IntervalType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("PaymentCount")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentPlanId")
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("StartAfterHandover")
                        .HasColumnType("boolean");

                    b.Property<decimal>("TotalPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("PaymentPlanMilestones", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestoneFee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("AmountOrRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<string>("MilestoneId")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MilestoneId");

                    b.ToTable("PaymentPlanMilestoneFees", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Projects.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Projects.ProjectInstallmentPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PaymentPlanId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPlanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectInstallmentPlan", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Properties.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<double?>("AreaSqFt")
                        .HasColumnType("double precision");

                    b.Property<double?>("AreaSqM")
                        .HasColumnType("double precision");

                    b.Property<decimal>("BalconyAreaSqFt")
                        .HasColumnType("numeric");

                    b.Property<int>("BathroomCount")
                        .HasColumnType("integer");

                    b.Property<int>("BuildingFloorCount")
                        .HasColumnType("integer");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<decimal>("CommonAreaSqFt")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .HasColumnType("text");

                    b.Property<bool>("IsFurnished")
                        .HasColumnType("boolean");

                    b.Property<int>("LeaseDurationMonths")
                        .HasColumnType("integer");

                    b.Property<int>("LeasePaymentTerm")
                        .HasColumnType("integer");

                    b.Property<decimal>("LeasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("LocationView")
                        .HasColumnType("text");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ParkingCount")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentPlanId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PlotNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("PricePerSqFt")
                        .HasColumnType("numeric");

                    b.Property<string>("ProjectId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("RoomCount")
                        .HasColumnType("integer");

                    b.Property<string>("Rules")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitAreaSqFt")
                        .HasColumnType("numeric");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("text");

                    b.Property<int>("UseType")
                        .HasColumnType("integer");

                    b.Property<string>("VillaNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentPlanId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Properties", "management");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Activities.UserActivity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ActivityData")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ActivityType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Permissions.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("PermissionNameIndex");

                    b.ToTable("Permissions", "core");

                    b.HasData(
                        new
                        {
                            Id = "01JETM3W2J196YX9QJY8HEY23R",
                            Name = "Permissions.Contacts.Create",
                            NormalizedName = "PERMISSIONS.CONTACTS.CREATE"
                        },
                        new
                        {
                            Id = "01JETM3W2J0R0MFC5E9XQC7KTW",
                            Name = "Permissions.Contacts.View",
                            NormalizedName = "PERMISSIONS.CONTACTS.VIEW"
                        },
                        new
                        {
                            Id = "01JETM3W2JHVMDJ24YYY03Q4X2",
                            Name = "Permissions.Contacts.Edit",
                            NormalizedName = "PERMISSIONS.CONTACTS.EDIT"
                        },
                        new
                        {
                            Id = "01JETM3W2JDCMTB59HPHXNVVJP",
                            Name = "Permissions.Contacts.Delete",
                            NormalizedName = "PERMISSIONS.CONTACTS.DELETE"
                        },
                        new
                        {
                            Id = "01JETM3W2JGRXBM8A5ZMDR1D69",
                            Name = "Permissions.Users.Create",
                            NormalizedName = "PERMISSIONS.USERS.CREATE"
                        },
                        new
                        {
                            Id = "01JETM3W2J8GBDW37S58K0AC7D",
                            Name = "Permissions.Users.View",
                            NormalizedName = "PERMISSIONS.USERS.VIEW"
                        },
                        new
                        {
                            Id = "01JETM3W2JDXEDN5H81A338XZH",
                            Name = "Permissions.Users.Edit",
                            NormalizedName = "PERMISSIONS.USERS.EDIT"
                        },
                        new
                        {
                            Id = "01JETM3W2J4Z54P78XG8CZKQSE",
                            Name = "Permissions.Users.Delete",
                            NormalizedName = "PERMISSIONS.USERS.DELETE"
                        },
                        new
                        {
                            Id = "01JETM3W2J2ZRJMV18MEWAV4E0",
                            Name = "Permissions.Roles.Create",
                            NormalizedName = "PERMISSIONS.ROLES.CREATE"
                        },
                        new
                        {
                            Id = "01JETM3W2J2VV6GGKYB66TZVM9",
                            Name = "Permissions.Roles.View",
                            NormalizedName = "PERMISSIONS.ROLES.VIEW"
                        },
                        new
                        {
                            Id = "01JETM3W2JTDCGQW4GPX8K30HX",
                            Name = "Permissions.Roles.Edit",
                            NormalizedName = "PERMISSIONS.ROLES.EDIT"
                        },
                        new
                        {
                            Id = "01JETM3W2JY40RTMNZ3K0F1JCE",
                            Name = "Permissions.Roles.Delete",
                            NormalizedName = "PERMISSIONS.ROLES.DELETE"
                        });
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "core");

                    b.HasData(
                        new
                        {
                            Id = "00000000000000000000000001",
                            Name = "SystemAdministrator",
                            NormalizedName = "SYSTEMADMINISTRATOR"
                        },
                        new
                        {
                            Id = "00000000000000000000000002",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "00000000000000000000000003",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("RoleId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Tokens.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", "core");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AccountId")
                        .HasColumnType("character varying(26)");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ManagerId")
                        .HasColumnType("character varying(26)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Mobile")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Salutation")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "core");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Ulid>", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Ulid>", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Ulid>", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Ulid>", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Auditable.AuditEntry", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Auditable.Audit", "Audit")
                        .WithMany("Changes")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.ClientAppLayout.NgMenu", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.ClientAppLayout.NgMenu", "Parent")
                        .WithMany("Items")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Accounts.Account", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.Booking", null)
                        .WithMany("Brokers")
                        .HasForeignKey("BookingId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.Booking", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.Properties.Property", "Property")
                        .WithMany("Bookings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingBroker", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.Navigation("Account");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingBrokerAgent", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.BookingBroker", "BookingBroker")
                        .WithMany()
                        .HasForeignKey("BookingBrokerId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("BookingBroker");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.BookingCustomer", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("Customers")
                        .HasForeignKey("BookingId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Commissions.Commission", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany("Commissions")
                        .HasForeignKey("BookingId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId");

                    b.Navigation("Booking");

                    b.Navigation("Broker");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.PaymentIntents.PaymentIntent", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Bookings.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Refunds.Refund", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Finances.Transactions.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Finances.Transactions.Transaction", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Finances.PaymentIntents.PaymentIntent", "PaymentIntent")
                        .WithMany()
                        .HasForeignKey("PaymentIntentId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PaymentIntent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany("PaymentPlanMilestones")
                        .HasForeignKey("PaymentPlanId");

                    b.Navigation("Owner");

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestoneFee", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestone", "Milestone")
                        .WithMany("MilestoneFees")
                        .HasForeignKey("MilestoneId");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Projects.Project", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Projects.ProjectInstallmentPlan", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany("Projects")
                        .HasForeignKey("PaymentPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.Projects.Project", "Project")
                        .WithMany("PaymentPlans")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PaymentPlan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Properties.Property", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", "PaymentPlan")
                        .WithMany()
                        .HasForeignKey("PaymentPlanId");

                    b.HasOne("TwoOneHomes.Domain.Entities.Inventories.Projects.Project", "Project")
                        .WithMany("Properties")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Owner");

                    b.Navigation("PaymentPlan");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Activities.UserActivity", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.RolePermission", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwoOneHomes.Domain.Users.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.UserRole", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Tokens.RefreshToken", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Users.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.User", b =>
                {
                    b.HasOne("TwoOneHomes.Domain.Entities.Accounts.Account", "Account")
                        .WithMany("Employees")
                        .HasForeignKey("AccountId");

                    b.HasOne("TwoOneHomes.Domain.Users.User", "Manager")
                        .WithMany("Members")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Account");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Auditable.Audit", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.ClientAppLayout.NgMenu", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Accounts.Account", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Properties");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Navigation("Brokers");

                    b.Navigation("Commissions");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlan", b =>
                {
                    b.Navigation("PaymentPlanMilestones");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.PaymentPlans.PaymentPlanMilestone", b =>
                {
                    b.Navigation("MilestoneFees");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Projects.Project", b =>
                {
                    b.Navigation("PaymentPlans");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Entities.Inventories.Properties.Property", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TwoOneHomes.Domain.Users.User", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserActivities");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
